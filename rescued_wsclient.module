<?php

/**
 * Implements hook_wsclient_endpoint_types().
 */
function rescued_wsclient_wsclient_endpoint_types() {
  return array(
    'discovery' => array(
      'label' => t('Discovery Service'),
      'class' => 'WSClientDiscoveryEndpoint',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function rescued_wsclient_form_wsclient_service_form_alter(&$form, &$form_state) {
  $service = $form_state['wsclient_service'];

  // Modify URL field max length from default 128.
  // @See: https://drupal.org/node/1787342
  $form['url']['#maxlength'] = 4096;
  $form['url']['#size'] = 120;

  // Add the AJAX callback to the wsclient type select list.
  $form['type']['#ajax'] = array(
    'callback' => 'rescued_wsclient_form_discovery_callback',
    'wrapper' => 'discovery',
    'effect' => 'fade',
  );

  // Discovery Service Settings fieldset.
  $fieldset['discovery'] = array(
    '#title' => 'Discovery Service Additional Settings',
    '#type' => 'fieldset',
    '#prefix' => '<div id="discovery">',
    '#suffix' => '</div>',
    '#states' => array(
      'visible' => array( // Only show this if discovery is selected.
        ':input[name="type"]' => array('value' => 'discovery'),
      ),
    ),
  );

  // Basic Discovery Service Settings.
  if ($service->type === 'discovery' || isset($form_state['input']['type']) && $form_state['input']['type'] === 'discovery') {
    $fieldset['discovery']['application_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Application Name'),
      '#description' => t("The Application Name is included in the User-Agent HTTP header for request to this REST API. It is only seen when logging REST API requests."),
      '#required' => TRUE,
      '#default_value' => isset($service->settings['discovery']['application_name']) ? $service->settings['discovery']['application_name'] : variable_get('site_name', 'Drupal'),
    );
    $fieldset['discovery']['auth_class'] = array(
      '#type' => 'select',
      '#title' => t('Google API PHP Client Oauth 2.0 Class'),
      '#description' => t("Select the OAuth 2.0 class to use when connecting to this server. The library uses 'Google_OAuth2' by default to connect to Google's API. If you are connecting to a different API, choose RESCUED class instead."),
      '#options' => array(
        'Google_OAuth2' => 'Google OAuth 2.0 Default Client Class',
        'Rescued_OAuth2' => 'RESCUED OAuth 2.0 Client Class'
      ),
      '#required' => TRUE,
      '#default_value' => isset($service->settings['discovery']['auth_class']) ? $service->settings['discovery']['auth_class'] : NULL,
      '#ajax' => array(
        'callback' => 'rescued_wsclient_form_oauth2_server_serttings_callback',
        'wrapper' => 'oauth2_server_settings',
        'effect' => 'fade',
      ),
    );

    // OAuth 2.0 Server Settings fieldset.
    $fieldset['discovery']['oauth2_server_settings'] = array(
      '#title' => 'OAuth 2.0 Server Settings',
      '#type' => 'fieldset',
      '#prefix' => '<div id="oauth2_server_settings">',
      '#suffix' => '</div>',
      '#collapsible' => TRUE,
      '#states' => array(
        'visible' => array( // Hide this unless Rescued_OAuth2 is selected.
          ':input[name="auth_class"]' => array('value' => 'Rescued_OAuth2'),
        ),
      ),
    );

    $fieldset['discovery']['oauth2_scenario'] = array(
      '#type' => 'select',
      '#title' => t('OAuth 2.0 Scenario Type'),
      '#description' => t("Select the type of OAuth 2.0 client scenario to use when connecting to the server. <br />See: <a href='!url'>Types of OAuth 2.0 Scenarios</a> <br />@TODO: 'Web Server' is not currently supported. It is here as a placeholder for now.", array('!url' => 'https://developers.google.com/accounts/docs/OAuth2#scenarios')),
      '#options' => array('service_account' => 'Service Account', 'web_server' => 'Web Server'),
      '#required' => TRUE,
      '#default_value' => isset($service->settings['discovery']['oauth2_scenario']) ? $service->settings['discovery']['oauth2_scenario'] : NULL,
      '#ajax' => array(
        'callback' => 'rescued_wsclient_form_oauth2_scenario_callback',
        'wrapper' => 'oauth2_settings',
        'effect' => 'fade',
      ),
    );

    // OAuth 2.0 Scenario Type Settings fieldset.
    $fieldset['discovery']['oauth2_settings'] = array(
      '#title' => 'OAuth 2.0 Scenario Type Settings',
      '#type' => 'fieldset',
      '#prefix' => '<div id="oauth2_settings">',
      '#suffix' => '</div>',
      '#collapsible' => TRUE,
      '#states' => array(
        'invisible' => array( // Hide this if nothing's selected.
          ':input[name="oauth2_scenario"]' => array('value' => ''),
        ),
      ),
    );

    $fieldset['discovery']['debug'] = array(
      '#type' => 'checkbox',
      '#title' => t('Discovery Service Debug Mode'),
      '#description' => t("Disabled cURL's SSL certificate verification check. This is useful for local development testing when using a self signed SSL certificate. This setting should be off for production use. <br />See: <a href='!url'>CURLOPT_SSL_VERIFYPEER</a>", array('!url' => 'http://php.net/manual/en/function.curl-setopt.php')),
      '#default_value' => isset($service->settings['discovery']['debug']) ? $service->settings['discovery']['debug'] : FALSE,
    );
  }

  // OAuth 2.0 Server Settings loaded by AJAX callback.
  if ((isset($service->settings['discovery']['auth_class'])
      && $service->settings['discovery']['auth_class'] === 'Rescued_OAuth2')
    || (isset($form_state['values']['auth_class'])
      && $form_state['values']['auth_class'] === 'Rescued_OAuth2')
  ) {
    $fieldset['discovery']['oauth2_server_settings']['oauth2_revoke_uri'] = array(
      '#type' => 'textfield',
      '#title' => t('OAuth 2.0 Server Token Revocation URI'),
      '#description' => t("Enter the Token Revocation URI provided by the OAuth 2.0 server when you register as a client."),
      '#required' => TRUE,
      '#default_value' => isset($service->settings['discovery']['oauth2_revoke_uri']) ? $service->settings['discovery']['oauth2_revoke_uri'] : '',
    );
    $fieldset['discovery']['oauth2_server_settings']['oauth2_token_uri'] = array(
      '#type' => 'textfield',
      '#title' => t('OAuth 2.0 Server Endpoint Token URI'),
      '#description' => t("Enter the Token Endpoint URI provided by the OAuth 2.0 server when you register as a client. <br />Example: https://accounts.google.com/o/oauth2/token"),
      '#required' => TRUE,
      '#default_value' => isset($service->settings['discovery']['oauth2_token_uri']) ? $service->settings['discovery']['oauth2_token_uri'] : '',
    );
    $fieldset['discovery']['oauth2_server_settings']['oauth2_auth_url'] = array(
      '#type' => 'textfield',
      '#title' => t('OAuth 2.0 Server Authentication URL'),
      '#description' => t("Enter the Server Authentication URL provided by the OAuth 2.0 server when you register as a client."),
      '#required' => TRUE,
      '#default_value' => isset($service->settings['discovery']['oauth2_auth_url']) ? $service->settings['discovery']['oauth2_auth_url'] : '',
    );
    $fieldset['discovery']['oauth2_server_settings']['oauth2_federated_signon_certs_url'] = array(
      '#type' => 'textfield',
      '#title' => t('OAuth 2.0 Server Federated Sign-on Certificates URL'),
      '#description' => t("Enter the Federated Sign-on Certificates URL provided by the OAuth 2.0 server when you register as a client. Gets federated sign-on certificates to use for verifying identity tokens."),
      // TOOD: Not using this field for anything yet.
      //'#required' => true,
      '#default_value' => isset($service->settings['discovery']['oauth2_federated_signon_certs_url']) ? $service->settings['discovery']['oauth2_federated_signon_certs_url'] : '',
    );
  }

  // OAuth 2.0 Service Account Scenario Type Settings loaded by AJAX callback.
  if ((isset($service->settings['discovery']['oauth2_scenario'])
      && $service->settings['discovery']['oauth2_scenario'] === 'service_account')
    || (isset($form_state['values']['oauth2_scenario'])
      && $form_state['values']['oauth2_scenario'] === 'service_account')
  ) {
    $fieldset['discovery']['oauth2_settings']['keyfile'] = array(
      '#type' => 'textfield',
      '#title' => t('OAuth 2.0 PKCS #12 Key File Path'),
      '#description' => t("Specify the full file system path to your key file. This file is provided by the OAuth 2.0 server when you register as a 'Service Account' client. The file should be uploaded to your Drupal web server in a secure location and it's path entered here. <br />Example: /var/www/private/my-key-file.p12"),
      '#required' => TRUE,
      '#default_value' => isset($service->settings['discovery']['keyfile']) ? $service->settings['discovery']['keyfile'] : '',
    );
    $fieldset['discovery']['oauth2_settings']['keyfile_pass'] = array(
      '#type' => 'password',
      '#title' => t('OAuth 2.0 PKCS #12 Key File Password'),
      '#description' => t("Enter the password for your PKCS #12 file provided by the OAuth 2.0 server when you register as a 'Service Account' client."),
      '#required' => TRUE,
      '#default_value' => isset($service->settings['discovery']['keyfile_pass']) ? $service->settings['discovery']['keyfile_pass'] : '',
    );
    $fieldset['discovery']['oauth2_settings']['iss'] = array(
      '#type' => 'textfield',
      '#title' => t('OAuth 2.0 Client ID'),
      '#description' => t("Enter the Client ID provided by the OAuth 2.0 server when you register as a 'Service Account' client."),
      '#required' => TRUE,
      '#default_value' => isset($service->settings['discovery']['iss']) ? $service->settings['discovery']['iss'] : '',
    );
    // TODO: Handle multiple scopes.
    $fieldset['discovery']['oauth2_settings']['scope'] = array(
      '#type' => 'textfield',
      '#title' => t('OAuth 2.0 Scopes'),
      '#description' => t("Enter the Scopes provided by the OAuth 2.0 server when you register as a 'Service Account' client."),
      '#required' => TRUE,
      '#default_value' => isset($service->settings['discovery']['scope']) ? $service->settings['discovery']['scope'] : '',
    );
    $fieldset['discovery']['oauth2_settings']['prn'] = array(
      '#type' => 'textfield',
      '#title' => t('OAuth 2.0 JWT Default Delegated Username'),
      '#description' => t("Enter the Default Delegated Username to use when connecting to the OAuth 2.0 server. This username will be used in situations where we are not connecting to the OAuth 2.0 server as a specific Drupal user."),
      '#required' => TRUE,
      '#default_value' => isset($service->settings['discovery']['prn']) ? $service->settings['discovery']['prn'] : '',
    );
    $fieldset['discovery']['oauth2_settings']['grant_type'] = array(
      '#type' => 'textfield',
      '#title' => t('OAuth 2.0 JWT Assertion Grant Type'),
      '#description' => t("Enter the Assertion Grant Type the OAuth 2.0 server is expecting for a JSON Web Token exchange. Default: assertion <br />See: <a href='!url'>Making the Access Token Request</a>", array('!url' => 'https://developers.google.com/accounts/docs/OAuth2ServiceAccount#makingrequest')),
      '#required' => TRUE,
      '#default_value' => isset($service->settings['discovery']['grant_type']) ? $service->settings['discovery']['grant_type'] : 'assertion',
    );
  }

  // OAuth 2.0 Web Server Scenario Type Settings loaded by AJAX callback.
  if ((isset($service->settings['discovery']['oauth2_scenario'])
      && $service->settings['discovery']['oauth2_scenario'] === 'web_server')
    || (isset($form_state['values']['oauth2_scenario'])
      && $form_state['values']['oauth2_scenario'] === 'web_server')
  ) {
    $fieldset['discovery']['oauth2_settings']['client_id'] = array(
      '#type' => 'textfield',
      '#title' => t('OAuth 2.0 Client ID'),
      '#description' => t("Enter the Client ID provided by the OAuth 2.0 server when you register as a 'Web Server' client."),
      //'#required' => true,
      '#default_value' => isset($service->settings['discovery']['client_id']) ? $service->settings['discovery']['client_id'] : '',
    );
    $fieldset['discovery']['oauth2_settings']['client_secret'] = array(
      '#type' => 'password',
      '#title' => t('OAuth 2.0 Client Secret'),
      '#description' => t("Enter the Client Secret provided by the OAuth 2.0 server when you register as a 'Web Server' client."),
      //'#required' => true,
      '#default_value' => isset($service->settings['discovery']['client_secret']) ? $service->settings['discovery']['client_secret'] : '',
    );
    $fieldset['discovery']['oauth2_settings']['redirect_uri'] = array(
      '#type' => 'password',
      '#title' => t('OAuth 2.0 Client Redirect URI'),
      '#description' => t("Enter the Redirect URI the OAuth 2.0 server will use to complete the token exchange."),
      //'#required' => true,
      '#default_value' => isset($service->settings['discovery']['redirect_uri']) ? $service->settings['discovery']['redirect_uri'] : '',
    );
    // TODO: Handle multiple scopes.
    $fieldset['discovery']['oauth2_settings']['scope'] = array(
      '#type' => 'textfield',
      '#title' => t('OAuth 2.0 Scopes'),
      '#description' => t("Enter the Scopes provided by the OAuth 2.0 server when you register as a 'Web Server' client."),
      //'#required' => true,
      '#default_value' => isset($service->settings['discovery']['scope']) ? $service->settings['discovery']['scope'] : '',
    );
  }

  // There's no weights in the original wsclient form, so we have to merge our
  // new fields in like this for logical usability.
  $oldform = $form;
  $first_half = array_slice($oldform, 0, array_search('type', array_keys($oldform)) + 1);
  $second_half = array_slice($oldform, array_search('type', array_keys($oldform)) + 1);
  $form = array();
  $form = array_merge($first_half, $fieldset, $second_half);

  $form['#submit'][] = 'rescued_wsclient_service_form_submit';
  $form['#validate'][] = 'rescued_wsclient_service_form_validate';
}

/**
 * OAuth 2.0 Discovery Service Settings form AJAX callback.
 */
function rescued_wsclient_form_discovery_callback($form, $form_state) {
  return $form['discovery'];
}

/**
 * OAuth 2.0 Server Settings form AJAX callback.
 */
function rescued_wsclient_form_oauth2_server_serttings_callback($form, $form_state) {
  return $form['discovery']['oauth2_server_settings'];
}

/**
 * OAuth 2.0 Scenario Type Settings form AJAX callback.
 */
function rescued_wsclient_form_oauth2_scenario_callback($form, $form_state) {
  return $form['discovery']['oauth2_settings'];
}

/**
 * Validation callback to check if the SOAP service URL points to a valid WSDL
 * file.
 */
function rescued_wsclient_service_form_validate($form, $form_state) {
  $service = $form_state['wsclient_service'];
  if ($form_state['values']['type'] == 'discovery') {
    // The url has to point to a valid Discovery Doc file.
    try {
      // TODO: Poll the discovery doc to make sure it's valid?
      // How do we validate this form?
    } catch (DiscoveryServiceException $e) {
      form_set_error('url', t('Error parsing the Discovery Document: %message', array('%message' => $e->getMessage())));
    }
  }
}

/**
 * WSClient form submit callback for 'discovery' clients.
 */
function rescued_wsclient_service_form_submit($form, &$form_state) {
  if (isset($form_state['values']['type']) &&
    $form_state['values']['type'] == 'discovery' &&
    ($form_state['op'] == 'add' || $form_state['op'] == 'edit')
  ) {

    $service = $form_state['wsclient_service'];

    // Save client's custom discovery settings parameters.
    if (isset($form['discovery'])) {
      $service->settings = array();
      $keys = rescued_get_discovery_form_fields($form['discovery']);

      foreach ($keys as $key) {
        if (!empty($form_state['values'][$key])) {
          // Add the field value to the $service->settings.
          $service->settings['discovery'][$key] = $form_state['values'][$key];
        }
      }
    }

    $endpoint = $service->endpoint();
    $endpoint->initializeMetadata();
    $service->save();
    rules_clear_cache();
    $service->clearCache();
    rescued_flush_caches();
    drupal_set_message(t('Operations and data types from the API Discovery Service have been imported automatically. If the service expects data types with properties as lists (multiple values for the property), please check the multiple flag on those properties. This cannot be auto-detected at the moment.'));
  }
}
